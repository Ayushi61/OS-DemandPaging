#include <xinu.h>
phy_fm_t ptab[MAX_PT_SIZE];
phy_fm_t stab[MAX_SWAP_SIZE];
phy_fm_t ftab[MAX_FFS_SIZE];

syscall init_frames()
{
	int i=0;
	for(i=0;i<MAX_PT_SIZE;i++)
	{
		//phy_fm_t* ptptr=&ptab[i];
		ptab[i].p_fm_pid=0;
		ptab[i].p_fm_type=0;
		ptab[i].p_fm_vpn=0;
		ptab[i].p_fm_isfree=1;
		ptab[i].p_fm_dirty=0;
		
	}
	for(i=0;i<MAX_FFS_SIZE;i++)
	{
		//phy_fm_t* ffptr=&ftab[i];
		ftab[i].p_fm_pid=0;
		ftab[i].p_fm_type=0;
		ftab[i].p_fm_vpn=0;
		ftab[i].p_fm_isfree=1;
		ftab[i].p_fm_dirty=0;
		
	}
	for(i=0;i<MAX_SWAP_SIZE;i++)
	{
		//phy_fm_t* swptr=&stab[i];
		stab[i].p_fm_pid=0;
		stab[i].p_fm_type=0;
		stab[i].p_fm_vpn=0;
		stab[i].p_fm_isfree=1;
		stab[i].p_fm_dirty=0;
		
	}
	

	return OK;
}

uint32 get_phy_fr_num(pid32 pid,frame_type type,tab_type table, uint32 vpn)
{

	uint32 offset;
	uint32 addr;
	if(type==PT_ENTRY)
	{
		
		for(offset=0;offset<MAX_PT_SIZE;offset++)
		{
			//phy_fm_t* ptptr=&ptab[offset];
			if(ptab[offset].p_fm_isfree)
			{
				kprintf("here");
				//addr = ptptr;
				ptab[offset].p_fm_type = table;
				ptab[offset].p_fm_pid = pid;
				ptab[offset].p_fm_isfree = 0;
				addr=offset+PT_START;
				//addr=addr*PAGE_SIZE;
				break;
			}
			
		}
		
	}

	else if(type==FFS)
	{
		//kprintf("does not enter \n");
		for(offset=0;offset<MAX_FFS_SIZE;offset++)
		{
			//phy_fm_t* ffsptr=&ftab[offset];
			if(ftab[offset].p_fm_isfree)
			{
				//addr = ffsptr;
				ftab[offset].p_fm_type = PAGE;
				ftab[offset].p_fm_pid = pid;
				ftab[offset].p_fm_isfree = 0;
				addr=offset+FFS_START;
				//addr=addr*PAGE_SIZE;
				break;
			}
		}

		// there are free frames present in FFS
		if(offset<MAX_FFS_SIZE)
		{
			//available_heap_size -= 1;
			return FFS_START+offset;
		}
		else
		{
			// there are no free frames present in FFS
			// swap a FFS frame to SWAP space
			// use approximate LRU
			uint32 lru_fr_index, tmp_fr_index;
     			uint32 pd_bits, tmp_pd_bits;
     			uint32 pt_bits, tmp_pt_bits;
     			uint32 lru_fr_vpn, tmp_fr_vpn;
     			uint32 lru_fr_pid, tmp_fr_pid;
     			uint32 swap_fr;
			uint32 fr_num;
			pd_t *tmp_pde;
			pt_t *tmp_pte;
			pd_t *PDE;
			pt_t *PTE;

			// Approximate LRU to find the frame to be evicted
			for(offset=0; offset<MAX_FFS_SIZE; offset++)
			{
				fr_num = FFS_START + offset;

				tmp_fr_vpn = ftab[offset].p_fm_vpn;
				tmp_fr_pid = ftab[offset].p_fm_pid;
				tmp_pd_bits = tmp_fr_vpn >> 10;
				tmp_pt_bits = (tmp_fr_vpn << 22) >> 22;
				
				tmp_pde = (pd_t *)(proctab[tmp_fr_pid].pdbr);
				tmp_pte = (pt_t *)((tmp_pde + tmp_pd_bits)->pd_base * PAGE_SIZE);
				tmp_pte = tmp_pte + tmp_pt_bits;
				if(tmp_pte->pt_acc == 1)
				{
					tmp_pte->pt_acc == 0;
				}
				else
				{
					lru_fr_index = offset;
					lru_fr_vpn = tmp_fr_vpn;
					lru_fr_pid = tmp_fr_pid;
					tmp_pte->pt_acc == 1;
					break;
				}
			}

			if(offset >= MAX_FFS_SIZE)
			{
				return SYSERR;
			}

			pd_bits = lru_fr_vpn >> 10;
			pt_bits = (lru_fr_vpn << 22) >> 22;
					
			PDE = (pd_t *)(proctab[lru_fr_pid].pdbr);
			PTE = (pt_t *)((PDE + pd_bits)->pd_base * PAGE_SIZE);
			PTE = PTE + pt_bits;
			if(PTE->pt_dirty == 0)
			{
				// check for presence in swap region
				int i;
				for(i=0; i<MAX_SWAP_SIZE; i++)
				{
					if((stab[i].p_fm_pid == lru_fr_pid) &&(stab[i].p_fm_vpn == lru_fr_vpn))
					{
						break;
					}
				}

				if(i<MAX_SWAP_SIZE)
				{
					// found a swap frame with latest copy
					swap_fr = SWAP_START + i;
					PTE->pt_pres = 0;
					PTE->pt_base = swap_fr;
					PTE->pt_avail = 1;
				}
				else
				{
					swap_fr = get_phy_fr_num(lru_fr_pid, SWAP, PAGE, lru_fr_vpn);
					//available_swap_size -= 1;
					if(swap_fr == SYSERR)
						return SYSERR;

					bcopy(((FFS_START + lru_fr_index) << 12), ((swap_fr) << 12), PAGE_SIZE);
					PTE->pt_base = swap_fr;
					PTE->pt_pres = 0;
					PTE->pt_avail = 1;
				}
			}
			else
			{
				int i;
				for(i=0; i<MAX_SWAP_SIZE; i++)
				{
					if((stab[i].p_fm_pid == lru_fr_pid) &&(stab[i].p_fm_vpn == lru_fr_vpn))
					{
						break;
					}
				}

				if(i<MAX_SWAP_SIZE)
				{
					// found a swap frame with latest copy
					swap_fr = SWAP_START + i;
					//PTE->pt_pres = 0;
					//PTE->pt_base = swap_fr;
					//PTE->pt_avail = 1;
				}
				else
				{
					swap_fr = get_phy_fr_num(lru_fr_pid, SWAP, PAGE, lru_fr_vpn);
					//available_swap_size -= 1;
					if(swap_fr == SYSERR)
						return SYSERR;

				}

				bcopy(((FFS_START + lru_fr_index) << 12), ((swap_fr) << 12), PAGE_SIZE);
				PTE->pt_base = swap_fr;
				PTE->pt_pres = 0;
				PTE->pt_avail = 1;
			}
			/* Invalidate the FSS frame befor sending */
			ftab[lru_fr_index].p_fm_pid = pid;
			ftab[lru_fr_index].p_fm_isfree = 0;
			ftab[lru_fr_index].p_fm_type = PAGE;
			ftab[lru_fr_index].p_fm_vpn = vpn;
 
    			return (FFS_START + lru_fr_index);		
		}
	}

	else if(type==SWAP)
	{
		for(offset=0; offset < MAX_SWAP_SIZE; offset++) 
		{
        		if(stab[offset].p_fm_isfree)
			{
				stab[offset].p_fm_pid = pid;
				stab[offset].p_fm_isfree = 0;
				stab[offset].p_fm_type = PAGE;
				stab[offset].p_fm_vpn = vpn;
				stab[offset].p_fm_dirty = 0;
            			break;
        		}
		}

		// there are free frames present in swap space
		if(offset < MAX_SWAP_SIZE)
		{
			available_swap_size -= 1;
			return (SWAP_START + offset);   
		}
		else // there are no free frames present in swap space
		{
			// kprintf("!!!SWAP SPACE FULL!!!\n");

			/*
			Look for frames which satisfy these conditions

			1. FFS frame and Swap frame have same owner
			2. FFS frame and Swap frame are mapped to same VPN
			3. FFS frame is not dirty

			Release the swap space that satisfies these 3 conditions 
			*/
			int offset_ss;
			int offset_ffs;
			for(offset_ss=0; offset_ss < MAX_SWAP_SIZE; offset_ss++)
			{
				for(offset_ffs=0; offset_ffs<MAX_FFS_SIZE; offset_ffs++)
				{
					if((stab[offset_ss].p_fm_pid == ftab[offset_ffs].p_fm_pid) && (stab[offset_ss].p_fm_vpn == ftab[offset_ffs].p_fm_vpn))
					{
						uint32 tmp_pid, tmp_vpn, pd_offset, pt_offset;
						tmp_pid = ftab[offset_ffs].p_fm_pid;
						tmp_vpn = ftab[offset_ffs].p_fm_vpn;

						/*
						VPN(32 bits) = BLANK(12 bits) + PD_OFFSET(10 bits) + PT_OFFSET(10 bits)
						PD_OFFSET = VPN >> 10
						PT_OFFSET = (VPN << 22) >> 22
						*/

						pd_offset = (tmp_vpn >> 10);
                     				pt_offset = ((tmp_vpn << 22) >> 22);

						pd_t *pd_start = (pd_t*)(proctab[tmp_pid].pdbr);
                     				pt_t *pt_start = (pt_t*)((pd_start + pd_offset)->pd_base * PAGE_SIZE);
						pt_t *pte = pt_start + pt_offset;

						if(pte->pt_dirty == 0)
						{
                        				stab[offset_ss].p_fm_pid = pid;
                        				stab[offset_ss].p_fm_isfree = 0;
                        				stab[offset_ss].p_fm_type = PAGE;
                        				stab[offset_ss].p_fm_vpn = vpn;
                        				stab[offset_ss].p_fm_dirty = 0;
                        				return (SWAP_START + offset_ss);
						}
					}
				}
			}
		}

		return SYSERR;
	}
	else
	{
		kprintf("unsupported page type\n");
		return SYSERR;
	}

	//kprintf("addr %d\n", addr);
	return addr;
}

syscall init_pde(pd_t* pd_base)
{
	int i;
	//pd_t* pd_base=(pd_t*) pd_base_addr;
	for(i=0;i<NUM_ENT_PPAGE;i++)
	{
		
		pd_base->pd_pres=0;	
 		pd_base->pd_write=0;
  		pd_base->pd_user=0;
  		pd_base->pd_pwt=0;
  		pd_base->pd_pcd=0;
  		pd_base->pd_acc=0;
 		pd_base->pd_mbz=0;
  		pd_base->pd_fmb=0; 
  		pd_base->pd_global=0;
  		pd_base->pd_avail=0;
  		pd_base->pd_base=0;
		//kprintf("pdbase %d\n",pd_base);		
		pd_base++;
			
	}
	
	return OK;
}


syscall set_pte(pt_t* pt_base1,uint32 offset)
{
	//int32 pt_base_addr=get_phy_fr_num(currpid,PT_ENTRY,PAGE);
	//init_pages(pt_base_addr);
	int i;
	//pt_t* pt_base1=(pt_t*) pt_base_addr;
	kprintf("%d\n", pt_base1);
	//kprintf(pt_base1);
	for(i=0;i<NUM_ENT_PPAGE;i++)
	{
		//pt_t* pt_base=(pt_t*) (pt_base_addr+offset);
		pt_base1->pt_pres=1;	
	 	pt_base1->pt_write=1;
	  	pt_base1->pt_user=0;
	  	pt_base1->pt_pwt=0;
	  	pt_base1->pt_pcd=0;
  		pt_base1->pt_acc=0;
	 	pt_base1->pt_mbz=0;
	  	pt_base1->pt_dirty=0;
  		pt_base1->pt_global=0;
	  	pt_base1->pt_avail=0;
  		pt_base1->pt_base=offset*NUM_ENT_PPAGE+i;
		pt_base1++;
	}
	kprintf("sum %d\n",offset*NUM_ENT_PPAGE+i);
	return OK;

}

syscall set_pde(pd_t* pd_base,uint32 total_pde)
{
	
	//kprintf("pd_entries %s\n",pt_base_addr);
	//set_pte(pt_base_addr);
	int offset=0;
	for(offset=0;offset<total_pde;offset++)
	{
	//for(offset=0;offset<NUM_ENT_PPAGE;offset++)
		kprintf("pde #%d\n",offset);
		uint32 pt_base_fr=get_phy_fr_num(currpid,PT_ENTRY,PAGE_TABLE,-1);
		uint32 pt_base_addr=pt_base_fr*PAGE_SIZE;
		pt_t* pt_base=(pt_t*)pt_base_addr;
		
	//pd_t* pd_base=(pd_t*) (pd_base_addr);
		
		kprintf("pdbaase %d\n",pd_base);
		pd_base->pd_pres=1;	
 		pd_base->pd_write=1;
  		pd_base->pd_user=0;
  		pd_base->pd_pwt=0;
  		pd_base->pd_pcd=0;
  		pd_base->pd_acc=0;
 		pd_base->pd_mbz=0;
  		pd_base->pd_fmb=0;
  		pd_base->pd_global=0;
  		pd_base->pd_avail=0;
  		pd_base->pd_base=pt_base_fr;
		pd_base++;
		set_pte(pt_base,offset);
	}
	return OK;

}

